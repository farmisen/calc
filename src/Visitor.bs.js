// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

var VisitingError = Caml_exceptions.create("Visitor-Calc.VisitingError");

function visit(node) {
  var doVisit = function (node) {
    if (!node) {
      return 0;
    }
    var value = node._0;
    if (typeof value === "number") {
      switch (value) {
        case /* Plus */0 :
            return doVisit(node._1) + doVisit(node._2) | 0;
        case /* Minus */1 :
            return doVisit(node._1) - doVisit(node._2) | 0;
        case /* Multiply */2 :
            return Math.imul(doVisit(node._1), doVisit(node._2));
        case /* Divide */3 :
            return Caml_int32.div(doVisit(node._1), doVisit(node._2));
        
      }
    } else {
      if (node._1) {
        throw {
              RE_EXN_ID: VisitingError,
              _1: "malformed Ast node",
              Error: new Error()
            };
      }
      if (node._2) {
        throw {
              RE_EXN_ID: VisitingError,
              _1: "malformed Ast node",
              Error: new Error()
            };
      }
      return value._0;
    }
  };
  try {
    return {
            TAG: /* Ok */0,
            _0: doVisit(node)
          };
  }
  catch (raw_message){
    var message = Caml_js_exceptions.internalToOCamlException(raw_message);
    if (message.RE_EXN_ID === VisitingError) {
      return {
              TAG: /* Error */1,
              _0: message._1
            };
    }
    throw message;
  }
}

exports.VisitingError = VisitingError;
exports.visit = visit;
/* No side effect */
