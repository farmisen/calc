// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var List = require("bs-platform/lib/js/list.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Exploder$Calc = require("./Exploder.bs.js");

function tokenize(input) {
  var _input = Exploder$Calc.explode(input);
  var _current;
  var _tokens = /* [] */0;
  while(true) {
    var tokens = _tokens;
    var current = _current;
    var input$1 = _input;
    if (!input$1) {
      return List.rev(current !== undefined ? ({
                      hd: current,
                      tl: tokens
                    }) : tokens);
    }
    var match = input$1 ? [
        input$1.hd,
        input$1.tl
      ] : [
        /* " " */32,
        /* [] */0
      ];
    var tail = match[1];
    var head = match[0];
    if (current !== undefined) {
      var exit = 0;
      if (typeof current === "number" || head > 57 || head < 48) {
        exit = 2;
      } else {
        _current = /* Number */{
          _0: (Math.imul(current._0, 10) + head | 0) - /* "0" */48 | 0
        };
        _input = tail;
        continue ;
      }
      if (exit === 2) {
        var exit$1 = 0;
        switch (head) {
          case 32 :
              _tokens = {
                hd: current,
                tl: tokens
              };
              _current = undefined;
              _input = tail;
              continue ;
          case 40 :
              _tokens = {
                hd: current,
                tl: tokens
              };
              _current = /* OpenParens */4;
              _input = tail;
              continue ;
          case 41 :
              _tokens = {
                hd: current,
                tl: tokens
              };
              _current = /* CloseParens */5;
              _input = tail;
              continue ;
          case 42 :
              _tokens = {
                hd: current,
                tl: tokens
              };
              _current = /* Multiply */2;
              _input = tail;
              continue ;
          case 43 :
              _tokens = {
                hd: current,
                tl: tokens
              };
              _current = /* Plus */0;
              _input = tail;
              continue ;
          case 45 :
              _tokens = {
                hd: current,
                tl: tokens
              };
              _current = /* Minus */1;
              _input = tail;
              continue ;
          case 33 :
          case 34 :
          case 35 :
          case 36 :
          case 37 :
          case 38 :
          case 39 :
          case 44 :
          case 46 :
              break;
          case 47 :
              _tokens = {
                hd: current,
                tl: tokens
              };
              _current = /* Divide */3;
              _input = tail;
              continue ;
          case 48 :
          case 49 :
          case 50 :
          case 51 :
          case 52 :
          case 53 :
          case 54 :
          case 55 :
          case 56 :
          case 57 :
              exit$1 = 3;
              break;
          default:
            
        }
        if (exit$1 === 3) {
          _tokens = {
            hd: current,
            tl: tokens
          };
          _current = /* Number */{
            _0: head - /* "0" */48 | 0
          };
          _input = tail;
          continue ;
        }
        
      }
      
    } else {
      var exit$2 = 0;
      switch (head) {
        case 32 :
            _current = undefined;
            _input = tail;
            continue ;
        case 40 :
            _current = /* OpenParens */4;
            _input = tail;
            continue ;
        case 41 :
            _current = /* CloseParens */5;
            _input = tail;
            continue ;
        case 42 :
            _current = /* Multiply */2;
            _input = tail;
            continue ;
        case 43 :
            _current = /* Plus */0;
            _input = tail;
            continue ;
        case 45 :
            _current = /* Minus */1;
            _input = tail;
            continue ;
        case 33 :
        case 34 :
        case 35 :
        case 36 :
        case 37 :
        case 38 :
        case 39 :
        case 44 :
        case 46 :
            break;
        case 47 :
            _current = /* Divide */3;
            _input = tail;
            continue ;
        case 48 :
        case 49 :
        case 50 :
        case 51 :
        case 52 :
        case 53 :
        case 54 :
        case 55 :
        case 56 :
        case 57 :
            exit$2 = 2;
            break;
        default:
          
      }
      if (exit$2 === 2) {
        _current = /* Number */{
          _0: head - /* "0" */48 | 0
        };
        _input = tail;
        continue ;
      }
      
    }
    return Pervasives.failwith("unexpected character " + Char.escaped(head));
  };
}

var eof = 26;

var zero = /* "0" */48;

exports.eof = eof;
exports.zero = zero;
exports.tokenize = tokenize;
/* No side effect */
