// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var List = require("bs-platform/lib/js/list.js");
var Exploder$Calc = require("./Exploder.bs.js");
var StringUtils$Calc = require("./StringUtils.bs.js");

function toString(token) {
  if (typeof token !== "number") {
    return "Number(" + (String(token._0) + ")");
  }
  switch (token) {
    case /* Plus */0 :
        return "Plus";
    case /* Minus */1 :
        return "Minus";
    case /* Multiply */2 :
        return "Multiply";
    case /* Divide */3 :
        return "Divide";
    case /* OpenParens */4 :
        return "OpenParens";
    case /* CloseParens */5 :
        return "CloseParens";
    case /* EOF */6 :
        return "EOF";
    
  }
}

function tokensToString(tokens) {
  return StringUtils$Calc.join(", ", List.map(toString, tokens));
}

function tokenize(input) {
  var doTokenize = function (current, tokens, input) {
    if (!input) {
      return {
              TAG: /* Ok */0,
              _0: List.rev(current !== undefined ? ({
                        hd: current,
                        tl: tokens
                      }) : tokens)
            };
    }
    var match = input ? [
        input.hd,
        input.tl
      ] : [
        /* " " */32,
        /* [] */0
      ];
    var tail = match[1];
    var head = match[0];
    var next = function (current, value) {
      return doTokenize(value, current !== undefined ? ({
                      hd: current,
                      tl: tokens
                    }) : tokens, tail);
    };
    var exit = 0;
    if (current !== undefined && typeof current !== "number") {
      if (!(head > 57 || head < 48)) {
        return next(undefined, /* Number */{
                    _0: (Math.imul(current._0, 10) + head | 0) - /* "0" */48 | 0
                  });
      }
      exit = 1;
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var exit$1 = 0;
      switch (head) {
        case 32 :
            return next(current, undefined);
        case 40 :
            return next(current, /* OpenParens */4);
        case 41 :
            return next(current, /* CloseParens */5);
        case 42 :
            return next(current, /* Multiply */2);
        case 43 :
            return next(current, /* Plus */0);
        case 45 :
            return next(current, /* Minus */1);
        case 33 :
        case 34 :
        case 35 :
        case 36 :
        case 37 :
        case 38 :
        case 39 :
        case 44 :
        case 46 :
            exit$1 = 2;
            break;
        case 47 :
            return next(current, /* Divide */3);
        case 48 :
        case 49 :
        case 50 :
        case 51 :
        case 52 :
        case 53 :
        case 54 :
        case 55 :
        case 56 :
        case 57 :
            exit$1 = 3;
            break;
        default:
          exit$1 = 2;
      }
      switch (exit$1) {
        case 2 :
            return {
                    TAG: /* Error */1,
                    _0: "unexpected character " + Char.escaped(head)
                  };
        case 3 :
            return next(current, /* Number */{
                        _0: head - /* "0" */48 | 0
                      });
        
      }
    }
    
  };
  return doTokenize(undefined, /* [] */0, Exploder$Calc.explode(input));
}

var eof = 26;

var zero = /* "0" */48;

exports.eof = eof;
exports.zero = zero;
exports.toString = toString;
exports.tokensToString = tokensToString;
exports.tokenize = tokenize;
/* No side effect */
