// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Visitor$Calc = require("../src/Visitor.bs.js");

Jest.describe("visit", (function (param) {
        Jest.test("empty", (function (param) {
                var value = Visitor$Calc.visit(/* Empty */0);
                if (value.TAG) {
                  return Pervasives.failwith(value._0);
                } else {
                  return Jest.Expect.toEqual(0, Jest.Expect.expect(value._0));
                }
              }));
        Jest.test("number", (function (param) {
                var value = Visitor$Calc.visit(/* Node */{
                      _0: /* Number */{
                        _0: 123
                      },
                      _1: /* Empty */0,
                      _2: /* Empty */0
                    });
                if (value.TAG) {
                  return Pervasives.failwith(value._0);
                } else {
                  return Jest.Expect.toEqual(123, Jest.Expect.expect(value._0));
                }
              }));
        Jest.test("adding 2 numbers", (function (param) {
                var value = Visitor$Calc.visit(/* Node */{
                      _0: /* Plus */0,
                      _1: /* Node */{
                        _0: /* Number */{
                          _0: 1
                        },
                        _1: /* Empty */0,
                        _2: /* Empty */0
                      },
                      _2: /* Node */{
                        _0: /* Number */{
                          _0: 3
                        },
                        _1: /* Empty */0,
                        _2: /* Empty */0
                      }
                    });
                if (value.TAG) {
                  return Pervasives.failwith(value._0);
                } else {
                  return Jest.Expect.toEqual(4, Jest.Expect.expect(value._0));
                }
              }));
        Jest.test("adding 3 numbers", (function (param) {
                var value = Visitor$Calc.visit(/* Node */{
                      _0: /* Plus */0,
                      _1: /* Node */{
                        _0: /* Number */{
                          _0: 1
                        },
                        _1: /* Empty */0,
                        _2: /* Empty */0
                      },
                      _2: /* Node */{
                        _0: /* Plus */0,
                        _1: /* Node */{
                          _0: /* Number */{
                            _0: 3
                          },
                          _1: /* Empty */0,
                          _2: /* Empty */0
                        },
                        _2: /* Node */{
                          _0: /* Number */{
                            _0: 4
                          },
                          _1: /* Empty */0,
                          _2: /* Empty */0
                        }
                      }
                    });
                if (value.TAG) {
                  return Pervasives.failwith(value._0);
                } else {
                  return Jest.Expect.toEqual(8, Jest.Expect.expect(value._0));
                }
              }));
        Jest.test("subbing 2 numbers", (function (param) {
                var value = Visitor$Calc.visit(/* Node */{
                      _0: /* Minus */1,
                      _1: /* Node */{
                        _0: /* Number */{
                          _0: 1
                        },
                        _1: /* Empty */0,
                        _2: /* Empty */0
                      },
                      _2: /* Node */{
                        _0: /* Number */{
                          _0: 3
                        },
                        _1: /* Empty */0,
                        _2: /* Empty */0
                      }
                    });
                if (value.TAG) {
                  return Pervasives.failwith(value._0);
                } else {
                  return Jest.Expect.toEqual(-2, Jest.Expect.expect(value._0));
                }
              }));
        Jest.test("multiplying 2 numbers", (function (param) {
                var value = Visitor$Calc.visit(/* Node */{
                      _0: /* Multiply */2,
                      _1: /* Node */{
                        _0: /* Number */{
                          _0: 2
                        },
                        _1: /* Empty */0,
                        _2: /* Empty */0
                      },
                      _2: /* Node */{
                        _0: /* Number */{
                          _0: 3
                        },
                        _1: /* Empty */0,
                        _2: /* Empty */0
                      }
                    });
                if (value.TAG) {
                  return Pervasives.failwith(value._0);
                } else {
                  return Jest.Expect.toEqual(6, Jest.Expect.expect(value._0));
                }
              }));
        Jest.test("dividing 2 numbers", (function (param) {
                var value = Visitor$Calc.visit(/* Node */{
                      _0: /* Divide */3,
                      _1: /* Node */{
                        _0: /* Number */{
                          _0: 9
                        },
                        _1: /* Empty */0,
                        _2: /* Empty */0
                      },
                      _2: /* Node */{
                        _0: /* Number */{
                          _0: 2
                        },
                        _1: /* Empty */0,
                        _2: /* Empty */0
                      }
                    });
                if (value.TAG) {
                  return Pervasives.failwith(value._0);
                } else {
                  return Jest.Expect.toEqual(4, Jest.Expect.expect(value._0));
                }
              }));
        return Jest.test("expression", (function (param) {
                      var value = Visitor$Calc.visit(/* Node */{
                            _0: /* Multiply */2,
                            _1: /* Node */{
                              _0: /* Plus */0,
                              _1: /* Node */{
                                _0: /* Number */{
                                  _0: 5
                                },
                                _1: /* Empty */0,
                                _2: /* Empty */0
                              },
                              _2: /* Node */{
                                _0: /* Minus */1,
                                _1: /* Node */{
                                  _0: /* Number */{
                                    _0: 2
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                },
                                _2: /* Node */{
                                  _0: /* Number */{
                                    _0: 3
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                }
                              }
                            },
                            _2: /* Node */{
                              _0: /* Number */{
                                _0: 4
                              },
                              _1: /* Empty */0,
                              _2: /* Empty */0
                            }
                          });
                      if (value.TAG) {
                        return Pervasives.failwith(value._0);
                      } else {
                        return Jest.Expect.toEqual(16, Jest.Expect.expect(value._0));
                      }
                    }));
      }));

/*  Not a pure module */
