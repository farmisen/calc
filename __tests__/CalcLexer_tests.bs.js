// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var CalcLexer$Calc = require("../src/CalcLexer.bs.js");

Jest.describe("tokenize", (function (param) {
        Jest.test("number", (function (param) {
                return Jest.Expect.toEqual({
                            hd: /* Number */{
                              _0: 17
                            },
                            tl: /* [] */0
                          }, Jest.Expect.expect(CalcLexer$Calc.tokenize("17")));
              }));
        Jest.test("explicitly positive number", (function (param) {
                var res = CalcLexer$Calc.tokenize("+12");
                return Jest.Expect.toEqual({
                            hd: /* Plus */0,
                            tl: {
                              hd: /* Number */{
                                _0: 12
                              },
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(res));
              }));
        Jest.test("negative number", (function (param) {
                var res = CalcLexer$Calc.tokenize("-12");
                return Jest.Expect.toEqual({
                            hd: /* Minus */1,
                            tl: {
                              hd: /* Number */{
                                _0: 12
                              },
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(res));
              }));
        Jest.test("mixed numbers", (function (param) {
                var res = CalcLexer$Calc.tokenize("17 0 123 -1");
                return Jest.Expect.toEqual({
                            hd: /* Number */{
                              _0: 17
                            },
                            tl: {
                              hd: /* Number */{
                                _0: 0
                              },
                              tl: {
                                hd: /* Number */{
                                  _0: 123
                                },
                                tl: {
                                  hd: /* Minus */1,
                                  tl: {
                                    hd: /* Number */{
                                      _0: 1
                                    },
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }, Jest.Expect.expect(res));
              }));
        Jest.test("operators", (function (param) {
                return Jest.Expect.toEqual({
                            hd: /* Plus */0,
                            tl: {
                              hd: /* Minus */1,
                              tl: {
                                hd: /* Multiply */2,
                                tl: {
                                  hd: /* Divide */3,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }, Jest.Expect.expect(CalcLexer$Calc.tokenize("+ - * /")));
              }));
        Jest.test("parens", (function (param) {
                return Jest.Expect.toEqual({
                            hd: /* OpenParens */4,
                            tl: {
                              hd: /* CloseParens */5,
                              tl: /* [] */0
                            }
                          }, Jest.Expect.expect(CalcLexer$Calc.tokenize("( )")));
              }));
        Jest.test("sticky parens", (function (param) {
                return Jest.Expect.toEqual({
                            hd: /* OpenParens */4,
                            tl: {
                              hd: /* OpenParens */4,
                              tl: {
                                hd: /* CloseParens */5,
                                tl: {
                                  hd: /* CloseParens */5,
                                  tl: /* [] */0
                                }
                              }
                            }
                          }, Jest.Expect.expect(CalcLexer$Calc.tokenize("(())")));
              }));
        Jest.test("expression", (function (param) {
                return Jest.Expect.toEqual({
                            hd: /* Number */{
                              _0: 1
                            },
                            tl: {
                              hd: /* Plus */0,
                              tl: {
                                hd: /* Number */{
                                  _0: 3
                                },
                                tl: /* [] */0
                              }
                            }
                          }, Jest.Expect.expect(CalcLexer$Calc.tokenize("1 + 3")));
              }));
        return Jest.test("compact expression", (function (param) {
                      return Jest.Expect.toEqual({
                                  hd: /* Number */{
                                    _0: 1
                                  },
                                  tl: {
                                    hd: /* Plus */0,
                                    tl: {
                                      hd: /* Number */{
                                        _0: 3
                                      },
                                      tl: /* [] */0
                                    }
                                  }
                                }, Jest.Expect.expect(CalcLexer$Calc.tokenize("1+3")));
                    }));
      }));

/*  Not a pure module */
