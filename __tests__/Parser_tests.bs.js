// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Parser$Calc = require("../src/Parser.bs.js");
var Tokenizer$Calc = require("../src/Tokenizer.bs.js");

Jest.describe("parse", (function (param) {
        Jest.test("empty", (function (param) {
                var tokens = Tokenizer$Calc.tokenize("");
                if (tokens.TAG) {
                  return Pervasives.failwith(tokens._0);
                } else {
                  return Jest.Expect.toEqual({
                              TAG: /* Ok */0,
                              _0: /* Empty */0
                            }, Jest.Expect.expect(Parser$Calc.parse(tokens._0)));
                }
              }));
        Jest.test("space", (function (param) {
                var tokens = Tokenizer$Calc.tokenize(" ");
                if (tokens.TAG) {
                  return Pervasives.failwith(tokens._0);
                } else {
                  return Jest.Expect.toEqual({
                              TAG: /* Ok */0,
                              _0: /* Empty */0
                            }, Jest.Expect.expect(Parser$Calc.parse(tokens._0)));
                }
              }));
        Jest.test("number", (function (param) {
                var tokens = Tokenizer$Calc.tokenize("123");
                if (tokens.TAG) {
                  return Pervasives.failwith(tokens._0);
                } else {
                  return Jest.Expect.toEqual({
                              TAG: /* Ok */0,
                              _0: /* Node */{
                                _0: /* Number */{
                                  _0: 123
                                },
                                _1: /* Empty */0,
                                _2: /* Empty */0
                              }
                            }, Jest.Expect.expect(Parser$Calc.parse(tokens._0)));
                }
              }));
        Jest.test("numbers", (function (param) {
                var tokens = Tokenizer$Calc.tokenize("123 456");
                if (tokens.TAG) {
                  return Pervasives.failwith(tokens._0);
                } else {
                  return Jest.Expect.toEqual({
                              TAG: /* Error */1,
                              _0: "unexpected token"
                            }, Jest.Expect.expect(Parser$Calc.parse(tokens._0)));
                }
              }));
        Jest.test("adding 2 numbers", (function (param) {
                var tokens = Tokenizer$Calc.tokenize("1 + 3");
                if (tokens.TAG) {
                  return Pervasives.failwith(tokens._0);
                } else {
                  return Jest.Expect.toEqual({
                              TAG: /* Ok */0,
                              _0: /* Node */{
                                _0: /* Plus */0,
                                _1: /* Node */{
                                  _0: /* Number */{
                                    _0: 1
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                },
                                _2: /* Node */{
                                  _0: /* Number */{
                                    _0: 3
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                }
                              }
                            }, Jest.Expect.expect(Parser$Calc.parse(tokens._0)));
                }
              }));
        Jest.test("adding 3 numbers", (function (param) {
                var tokens = Tokenizer$Calc.tokenize("1 + 3 + 4");
                if (tokens.TAG) {
                  return Pervasives.failwith(tokens._0);
                } else {
                  return Jest.Expect.toEqual({
                              TAG: /* Ok */0,
                              _0: /* Node */{
                                _0: /* Plus */0,
                                _1: /* Node */{
                                  _0: /* Number */{
                                    _0: 1
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                },
                                _2: /* Node */{
                                  _0: /* Plus */0,
                                  _1: /* Node */{
                                    _0: /* Number */{
                                      _0: 3
                                    },
                                    _1: /* Empty */0,
                                    _2: /* Empty */0
                                  },
                                  _2: /* Node */{
                                    _0: /* Number */{
                                      _0: 4
                                    },
                                    _1: /* Empty */0,
                                    _2: /* Empty */0
                                  }
                                }
                              }
                            }, Jest.Expect.expect(Parser$Calc.parse(tokens._0)));
                }
              }));
        Jest.test("subbing", (function (param) {
                var tokens = Tokenizer$Calc.tokenize("1 - 3");
                if (tokens.TAG) {
                  return Pervasives.failwith(tokens._0);
                } else {
                  return Jest.Expect.toEqual({
                              TAG: /* Ok */0,
                              _0: /* Node */{
                                _0: /* Minus */1,
                                _1: /* Node */{
                                  _0: /* Number */{
                                    _0: 1
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                },
                                _2: /* Node */{
                                  _0: /* Number */{
                                    _0: 3
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                }
                              }
                            }, Jest.Expect.expect(Parser$Calc.parse(tokens._0)));
                }
              }));
        Jest.test("multiplying", (function (param) {
                var tokens = Tokenizer$Calc.tokenize("1 * 3");
                if (tokens.TAG) {
                  return Pervasives.failwith(tokens._0);
                } else {
                  return Jest.Expect.toEqual({
                              TAG: /* Ok */0,
                              _0: /* Node */{
                                _0: /* Multiply */2,
                                _1: /* Node */{
                                  _0: /* Number */{
                                    _0: 1
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                },
                                _2: /* Node */{
                                  _0: /* Number */{
                                    _0: 3
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                }
                              }
                            }, Jest.Expect.expect(Parser$Calc.parse(tokens._0)));
                }
              }));
        Jest.test("dividing", (function (param) {
                var tokens = Tokenizer$Calc.tokenize("1 / 3");
                if (tokens.TAG) {
                  return Pervasives.failwith(tokens._0);
                } else {
                  return Jest.Expect.toEqual({
                              TAG: /* Ok */0,
                              _0: /* Node */{
                                _0: /* Divide */3,
                                _1: /* Node */{
                                  _0: /* Number */{
                                    _0: 1
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                },
                                _2: /* Node */{
                                  _0: /* Number */{
                                    _0: 3
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                }
                              }
                            }, Jest.Expect.expect(Parser$Calc.parse(tokens._0)));
                }
              }));
        Jest.test("parens", (function (param) {
                var tokens = Tokenizer$Calc.tokenize("(1 + 3)");
                if (tokens.TAG) {
                  return Pervasives.failwith(tokens._0);
                } else {
                  return Jest.Expect.toEqual({
                              TAG: /* Ok */0,
                              _0: /* Node */{
                                _0: /* Plus */0,
                                _1: /* Node */{
                                  _0: /* Number */{
                                    _0: 1
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                },
                                _2: /* Node */{
                                  _0: /* Number */{
                                    _0: 3
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                }
                              }
                            }, Jest.Expect.expect(Parser$Calc.parse(tokens._0)));
                }
              }));
        Jest.test("expression", (function (param) {
                var tokens = Tokenizer$Calc.tokenize("(1 + 3) * 4");
                if (tokens.TAG) {
                  return Pervasives.failwith(tokens._0);
                } else {
                  return Jest.Expect.toEqual({
                              TAG: /* Ok */0,
                              _0: /* Node */{
                                _0: /* Multiply */2,
                                _1: /* Node */{
                                  _0: /* Plus */0,
                                  _1: /* Node */{
                                    _0: /* Number */{
                                      _0: 1
                                    },
                                    _1: /* Empty */0,
                                    _2: /* Empty */0
                                  },
                                  _2: /* Node */{
                                    _0: /* Number */{
                                      _0: 3
                                    },
                                    _1: /* Empty */0,
                                    _2: /* Empty */0
                                  }
                                },
                                _2: /* Node */{
                                  _0: /* Number */{
                                    _0: 4
                                  },
                                  _1: /* Empty */0,
                                  _2: /* Empty */0
                                }
                              }
                            }, Jest.Expect.expect(Parser$Calc.parse(tokens._0)));
                }
              }));
        return Jest.Only.test("nested", (function (param) {
                      var tokens = Tokenizer$Calc.tokenize("(1 + (2 - 3)) * 4");
                      if (tokens.TAG) {
                        return Pervasives.failwith(tokens._0);
                      } else {
                        return Jest.Expect.toEqual({
                                    TAG: /* Ok */0,
                                    _0: /* Node */{
                                      _0: /* Multiply */2,
                                      _1: /* Node */{
                                        _0: /* Plus */0,
                                        _1: /* Node */{
                                          _0: /* Number */{
                                            _0: 1
                                          },
                                          _1: /* Empty */0,
                                          _2: /* Empty */0
                                        },
                                        _2: /* Node */{
                                          _0: /* Minus */1,
                                          _1: /* Node */{
                                            _0: /* Number */{
                                              _0: 2
                                            },
                                            _1: /* Empty */0,
                                            _2: /* Empty */0
                                          },
                                          _2: /* Node */{
                                            _0: /* Number */{
                                              _0: 3
                                            },
                                            _1: /* Empty */0,
                                            _2: /* Empty */0
                                          }
                                        }
                                      },
                                      _2: /* Node */{
                                        _0: /* Number */{
                                          _0: 4
                                        },
                                        _1: /* Empty */0,
                                        _2: /* Empty */0
                                      }
                                    }
                                  }, Jest.Expect.expect(Parser$Calc.parse(tokens._0)));
                      }
                    }));
      }));

/*  Not a pure module */
